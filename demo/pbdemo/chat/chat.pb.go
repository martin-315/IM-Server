// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: chat/chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WSToMsgSvrChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendID         string   `protobuf:"bytes,1,opt,name=SendID,proto3" json:"SendID,omitempty"`
	RecvID         string   `protobuf:"bytes,2,opt,name=RecvID,proto3" json:"RecvID,omitempty"`
	Content        string   `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	SendTime       int64    `protobuf:"varint,4,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	MsgFrom        int32    `protobuf:"varint,5,opt,name=MsgFrom,proto3" json:"MsgFrom,omitempty"`
	SenderNickName string   `protobuf:"bytes,6,opt,name=SenderNickName,proto3" json:"SenderNickName,omitempty"`
	SenderFaceURL  string   `protobuf:"bytes,7,opt,name=SenderFaceURL,proto3" json:"SenderFaceURL,omitempty"`
	ContentType    int32    `protobuf:"varint,8,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	SessionType    int32    `protobuf:"varint,9,opt,name=SessionType,proto3" json:"SessionType,omitempty"`
	OperationID    string   `protobuf:"bytes,10,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	MsgID          string   `protobuf:"bytes,11,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Token          string   `protobuf:"bytes,12,opt,name=Token,proto3" json:"Token,omitempty"`
	OfflineInfo    string   `protobuf:"bytes,13,opt,name=OfflineInfo,proto3" json:"OfflineInfo,omitempty"`
	Options        string   `protobuf:"bytes,14,opt,name=Options,proto3" json:"Options,omitempty"`
	PlatformID     int32    `protobuf:"varint,15,opt,name=PlatformID,proto3" json:"PlatformID,omitempty"`
	ForceList      []string `protobuf:"bytes,16,rep,name=ForceList,proto3" json:"ForceList,omitempty"`
	ClientMsgID    string   `protobuf:"bytes,17,opt,name=ClientMsgID,proto3" json:"ClientMsgID,omitempty"`
}

func (x *WSToMsgSvrChatMsg) Reset() {
	*x = WSToMsgSvrChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WSToMsgSvrChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WSToMsgSvrChatMsg) ProtoMessage() {}

func (x *WSToMsgSvrChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WSToMsgSvrChatMsg.ProtoReflect.Descriptor instead.
func (*WSToMsgSvrChatMsg) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{0}
}

func (x *WSToMsgSvrChatMsg) GetSendID() string {
	if x != nil {
		return x.SendID
	}
	return ""
}

func (x *WSToMsgSvrChatMsg) GetRecvID() string {
	if x != nil {
		return x.RecvID
	}
	return ""
}

func (x *WSToMsgSvrChatMsg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WSToMsgSvrChatMsg) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *WSToMsgSvrChatMsg) GetMsgFrom() int32 {
	if x != nil {
		return x.MsgFrom
	}
	return 0
}

func (x *WSToMsgSvrChatMsg) GetSenderNickName() string {
	if x != nil {
		return x.SenderNickName
	}
	return ""
}

func (x *WSToMsgSvrChatMsg) GetSenderFaceURL() string {
	if x != nil {
		return x.SenderFaceURL
	}
	return ""
}

func (x *WSToMsgSvrChatMsg) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *WSToMsgSvrChatMsg) GetSessionType() int32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *WSToMsgSvrChatMsg) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *WSToMsgSvrChatMsg) GetMsgID() string {
	if x != nil {
		return x.MsgID
	}
	return ""
}

func (x *WSToMsgSvrChatMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *WSToMsgSvrChatMsg) GetOfflineInfo() string {
	if x != nil {
		return x.OfflineInfo
	}
	return ""
}

func (x *WSToMsgSvrChatMsg) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *WSToMsgSvrChatMsg) GetPlatformID() int32 {
	if x != nil {
		return x.PlatformID
	}
	return 0
}

func (x *WSToMsgSvrChatMsg) GetForceList() []string {
	if x != nil {
		return x.ForceList
	}
	return nil
}

func (x *WSToMsgSvrChatMsg) GetClientMsgID() string {
	if x != nil {
		return x.ClientMsgID
	}
	return ""
}

type MsgSvrToPushSvrChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendID         string `protobuf:"bytes,1,opt,name=SendID,proto3" json:"SendID,omitempty"`
	RecvID         string `protobuf:"bytes,2,opt,name=RecvID,proto3" json:"RecvID,omitempty"`
	Content        string `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	RecvSeq        int64  `protobuf:"varint,4,opt,name=RecvSeq,proto3" json:"RecvSeq,omitempty"`
	SendTime       int64  `protobuf:"varint,5,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	MsgFrom        int32  `protobuf:"varint,6,opt,name=MsgFrom,proto3" json:"MsgFrom,omitempty"`
	SenderNickName string `protobuf:"bytes,7,opt,name=SenderNickName,proto3" json:"SenderNickName,omitempty"`
	SenderFaceURL  string `protobuf:"bytes,8,opt,name=SenderFaceURL,proto3" json:"SenderFaceURL,omitempty"`
	ContentType    int32  `protobuf:"varint,9,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	SessionType    int32  `protobuf:"varint,10,opt,name=SessionType,proto3" json:"SessionType,omitempty"`
	OperationID    string `protobuf:"bytes,11,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	MsgID          string `protobuf:"bytes,12,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	OfflineInfo    string `protobuf:"bytes,13,opt,name=OfflineInfo,proto3" json:"OfflineInfo,omitempty"`
	Options        string `protobuf:"bytes,14,opt,name=Options,proto3" json:"Options,omitempty"`
	PlatformID     int32  `protobuf:"varint,15,opt,name=PlatformID,proto3" json:"PlatformID,omitempty"`
	ClientMsgID    string `protobuf:"bytes,16,opt,name=ClientMsgID,proto3" json:"ClientMsgID,omitempty"`
}

func (x *MsgSvrToPushSvrChatMsg) Reset() {
	*x = MsgSvrToPushSvrChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSvrToPushSvrChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSvrToPushSvrChatMsg) ProtoMessage() {}

func (x *MsgSvrToPushSvrChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSvrToPushSvrChatMsg.ProtoReflect.Descriptor instead.
func (*MsgSvrToPushSvrChatMsg) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{1}
}

func (x *MsgSvrToPushSvrChatMsg) GetSendID() string {
	if x != nil {
		return x.SendID
	}
	return ""
}

func (x *MsgSvrToPushSvrChatMsg) GetRecvID() string {
	if x != nil {
		return x.RecvID
	}
	return ""
}

func (x *MsgSvrToPushSvrChatMsg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MsgSvrToPushSvrChatMsg) GetRecvSeq() int64 {
	if x != nil {
		return x.RecvSeq
	}
	return 0
}

func (x *MsgSvrToPushSvrChatMsg) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *MsgSvrToPushSvrChatMsg) GetMsgFrom() int32 {
	if x != nil {
		return x.MsgFrom
	}
	return 0
}

func (x *MsgSvrToPushSvrChatMsg) GetSenderNickName() string {
	if x != nil {
		return x.SenderNickName
	}
	return ""
}

func (x *MsgSvrToPushSvrChatMsg) GetSenderFaceURL() string {
	if x != nil {
		return x.SenderFaceURL
	}
	return ""
}

func (x *MsgSvrToPushSvrChatMsg) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *MsgSvrToPushSvrChatMsg) GetSessionType() int32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *MsgSvrToPushSvrChatMsg) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *MsgSvrToPushSvrChatMsg) GetMsgID() string {
	if x != nil {
		return x.MsgID
	}
	return ""
}

func (x *MsgSvrToPushSvrChatMsg) GetOfflineInfo() string {
	if x != nil {
		return x.OfflineInfo
	}
	return ""
}

func (x *MsgSvrToPushSvrChatMsg) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *MsgSvrToPushSvrChatMsg) GetPlatformID() int32 {
	if x != nil {
		return x.PlatformID
	}
	return 0
}

func (x *MsgSvrToPushSvrChatMsg) GetClientMsgID() string {
	if x != nil {
		return x.ClientMsgID
	}
	return ""
}

type PullMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	SeqBegin    int64  `protobuf:"varint,2,opt,name=SeqBegin,proto3" json:"SeqBegin,omitempty"`
	SeqEnd      int64  `protobuf:"varint,3,opt,name=SeqEnd,proto3" json:"SeqEnd,omitempty"`
	OperationID string `protobuf:"bytes,4,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
}

func (x *PullMessageReq) Reset() {
	*x = PullMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullMessageReq) ProtoMessage() {}

func (x *PullMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullMessageReq.ProtoReflect.Descriptor instead.
func (*PullMessageReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{2}
}

func (x *PullMessageReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PullMessageReq) GetSeqBegin() int64 {
	if x != nil {
		return x.SeqBegin
	}
	return 0
}

func (x *PullMessageReq) GetSeqEnd() int64 {
	if x != nil {
		return x.SeqEnd
	}
	return 0
}

func (x *PullMessageReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type PullMessageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode       int32           `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	ErrMsg        string          `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	MaxSeq        int64           `protobuf:"varint,3,opt,name=MaxSeq,proto3" json:"MaxSeq,omitempty"`
	MinSeq        int64           `protobuf:"varint,4,opt,name=MinSeq,proto3" json:"MinSeq,omitempty"`
	SingleUserMsg []*GatherFormat `protobuf:"bytes,5,rep,name=SingleUserMsg,proto3" json:"SingleUserMsg,omitempty"`
	GroupUserMsg  []*GatherFormat `protobuf:"bytes,6,rep,name=GroupUserMsg,proto3" json:"GroupUserMsg,omitempty"`
}

func (x *PullMessageResp) Reset() {
	*x = PullMessageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullMessageResp) ProtoMessage() {}

func (x *PullMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullMessageResp.ProtoReflect.Descriptor instead.
func (*PullMessageResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{3}
}

func (x *PullMessageResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *PullMessageResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *PullMessageResp) GetMaxSeq() int64 {
	if x != nil {
		return x.MaxSeq
	}
	return 0
}

func (x *PullMessageResp) GetMinSeq() int64 {
	if x != nil {
		return x.MinSeq
	}
	return 0
}

func (x *PullMessageResp) GetSingleUserMsg() []*GatherFormat {
	if x != nil {
		return x.SingleUserMsg
	}
	return nil
}

func (x *PullMessageResp) GetGroupUserMsg() []*GatherFormat {
	if x != nil {
		return x.GroupUserMsg
	}
	return nil
}

type GetNewSeqReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OperationID string `protobuf:"bytes,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
}

func (x *GetNewSeqReq) Reset() {
	*x = GetNewSeqReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewSeqReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewSeqReq) ProtoMessage() {}

func (x *GetNewSeqReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewSeqReq.ProtoReflect.Descriptor instead.
func (*GetNewSeqReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{4}
}

func (x *GetNewSeqReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetNewSeqReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type GetNewSeqResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32  `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Seq     int64  `protobuf:"varint,3,opt,name=Seq,proto3" json:"Seq,omitempty"`
}

func (x *GetNewSeqResp) Reset() {
	*x = GetNewSeqResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewSeqResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewSeqResp) ProtoMessage() {}

func (x *GetNewSeqResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewSeqResp.ProtoReflect.Descriptor instead.
func (*GetNewSeqResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{5}
}

func (x *GetNewSeqResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *GetNewSeqResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *GetNewSeqResp) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type GatherFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id"`
	// @inject_tag: json:"list"
	List []*MsgFormat `protobuf:"bytes,2,rep,name=List,proto3" json:"list"` //detail msg
}

func (x *GatherFormat) Reset() {
	*x = GatherFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatherFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatherFormat) ProtoMessage() {}

func (x *GatherFormat) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatherFormat.ProtoReflect.Descriptor instead.
func (*GatherFormat) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{6}
}

func (x *GatherFormat) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GatherFormat) GetList() []*MsgFormat {
	if x != nil {
		return x.List
	}
	return nil
}

type MsgFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"sendID"
	SendID string `protobuf:"bytes,1,opt,name=SendID,proto3" json:"sendID"`
	// @inject_tag: json:"recvID"
	RecvID string `protobuf:"bytes,2,opt,name=RecvID,proto3" json:"recvID"`
	// @inject_tag: json:"msgFrom"
	MsgFrom int32 `protobuf:"varint,3,opt,name=MsgFrom,proto3" json:"msgFrom"`
	// @inject_tag: json:"contentType"
	ContentType int32 `protobuf:"varint,4,opt,name=ContentType,proto3" json:"contentType"`
	// @inject_tag: json:"serverMsgID"
	ServerMsgID string `protobuf:"bytes,5,opt,name=ServerMsgID,proto3" json:"serverMsgID"`
	// @inject_tag: json:"content"
	Content string `protobuf:"bytes,6,opt,name=Content,proto3" json:"content"`
	// @inject_tag: json:"seq"
	Seq int64 `protobuf:"varint,7,opt,name=Seq,proto3" json:"seq"`
	// @inject_tag: json:"sendTime"
	SendTime int64 `protobuf:"varint,8,opt,name=SendTime,proto3" json:"sendTime"`
	// @inject_tag: json:"senderPlatformID"
	SenderPlatformID int32 `protobuf:"varint,9,opt,name=SenderPlatformID,proto3" json:"senderPlatformID"`
	// @inject_tag: json:"senderNickName"
	SenderNickName string `protobuf:"bytes,10,opt,name=SenderNickName,proto3" json:"senderNickName"`
	// @inject_tag: json:"senderFaceUrl"
	SenderFaceURL string `protobuf:"bytes,11,opt,name=SenderFaceURL,proto3" json:"senderFaceUrl"`
	// @inject_tag: json:"clientMsgID"
	ClientMsgID string `protobuf:"bytes,12,opt,name=ClientMsgID,proto3" json:"clientMsgID"`
}

func (x *MsgFormat) Reset() {
	*x = MsgFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFormat) ProtoMessage() {}

func (x *MsgFormat) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFormat.ProtoReflect.Descriptor instead.
func (*MsgFormat) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{7}
}

func (x *MsgFormat) GetSendID() string {
	if x != nil {
		return x.SendID
	}
	return ""
}

func (x *MsgFormat) GetRecvID() string {
	if x != nil {
		return x.RecvID
	}
	return ""
}

func (x *MsgFormat) GetMsgFrom() int32 {
	if x != nil {
		return x.MsgFrom
	}
	return 0
}

func (x *MsgFormat) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *MsgFormat) GetServerMsgID() string {
	if x != nil {
		return x.ServerMsgID
	}
	return ""
}

func (x *MsgFormat) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MsgFormat) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *MsgFormat) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *MsgFormat) GetSenderPlatformID() int32 {
	if x != nil {
		return x.SenderPlatformID
	}
	return 0
}

func (x *MsgFormat) GetSenderNickName() string {
	if x != nil {
		return x.SenderNickName
	}
	return ""
}

func (x *MsgFormat) GetSenderFaceURL() string {
	if x != nil {
		return x.SenderFaceURL
	}
	return ""
}

func (x *MsgFormat) GetClientMsgID() string {
	if x != nil {
		return x.ClientMsgID
	}
	return ""
}

type UserSendMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqIdentifier  int32    `protobuf:"varint,1,opt,name=ReqIdentifier,proto3" json:"ReqIdentifier,omitempty"`
	Token          string   `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	SendID         string   `protobuf:"bytes,3,opt,name=SendID,proto3" json:"SendID,omitempty"`
	OperationID    string   `protobuf:"bytes,4,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	SenderNickName string   `protobuf:"bytes,5,opt,name=SenderNickName,proto3" json:"SenderNickName,omitempty"`
	SenderFaceURL  string   `protobuf:"bytes,6,opt,name=SenderFaceURL,proto3" json:"SenderFaceURL,omitempty"`
	PlatformID     int32    `protobuf:"varint,7,opt,name=PlatformID,proto3" json:"PlatformID,omitempty"`
	SessionType    int32    `protobuf:"varint,8,opt,name=SessionType,proto3" json:"SessionType,omitempty"`
	MsgFrom        int32    `protobuf:"varint,9,opt,name=MsgFrom,proto3" json:"MsgFrom,omitempty"`
	ContentType    int32    `protobuf:"varint,10,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	RecvID         string   `protobuf:"bytes,11,opt,name=RecvID,proto3" json:"RecvID,omitempty"`
	ForceList      []string `protobuf:"bytes,12,rep,name=ForceList,proto3" json:"ForceList,omitempty"`
	Content        string   `protobuf:"bytes,13,opt,name=Content,proto3" json:"Content,omitempty"`
	Options        string   `protobuf:"bytes,14,opt,name=Options,proto3" json:"Options,omitempty"`
	ClientMsgID    string   `protobuf:"bytes,15,opt,name=ClientMsgID,proto3" json:"ClientMsgID,omitempty"`
	OffLineInfo    string   `protobuf:"bytes,16,opt,name=OffLineInfo,proto3" json:"OffLineInfo,omitempty"`
	Ex             string   `protobuf:"bytes,17,opt,name=Ex,proto3" json:"Ex,omitempty"`
}

func (x *UserSendMsgReq) Reset() {
	*x = UserSendMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSendMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSendMsgReq) ProtoMessage() {}

func (x *UserSendMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSendMsgReq.ProtoReflect.Descriptor instead.
func (*UserSendMsgReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{8}
}

func (x *UserSendMsgReq) GetReqIdentifier() int32 {
	if x != nil {
		return x.ReqIdentifier
	}
	return 0
}

func (x *UserSendMsgReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserSendMsgReq) GetSendID() string {
	if x != nil {
		return x.SendID
	}
	return ""
}

func (x *UserSendMsgReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *UserSendMsgReq) GetSenderNickName() string {
	if x != nil {
		return x.SenderNickName
	}
	return ""
}

func (x *UserSendMsgReq) GetSenderFaceURL() string {
	if x != nil {
		return x.SenderFaceURL
	}
	return ""
}

func (x *UserSendMsgReq) GetPlatformID() int32 {
	if x != nil {
		return x.PlatformID
	}
	return 0
}

func (x *UserSendMsgReq) GetSessionType() int32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *UserSendMsgReq) GetMsgFrom() int32 {
	if x != nil {
		return x.MsgFrom
	}
	return 0
}

func (x *UserSendMsgReq) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *UserSendMsgReq) GetRecvID() string {
	if x != nil {
		return x.RecvID
	}
	return ""
}

func (x *UserSendMsgReq) GetForceList() []string {
	if x != nil {
		return x.ForceList
	}
	return nil
}

func (x *UserSendMsgReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UserSendMsgReq) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *UserSendMsgReq) GetClientMsgID() string {
	if x != nil {
		return x.ClientMsgID
	}
	return ""
}

func (x *UserSendMsgReq) GetOffLineInfo() string {
	if x != nil {
		return x.OffLineInfo
	}
	return ""
}

func (x *UserSendMsgReq) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type UserSendMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode       int32  `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	ErrMsg        string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	ReqIdentifier int32  `protobuf:"varint,3,opt,name=ReqIdentifier,proto3" json:"ReqIdentifier,omitempty"`
	SendTime      int64  `protobuf:"varint,5,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	ServerMsgID   string `protobuf:"bytes,6,opt,name=ServerMsgID,proto3" json:"ServerMsgID,omitempty"`
	ClientMsgID   string `protobuf:"bytes,7,opt,name=ClientMsgID,proto3" json:"ClientMsgID,omitempty"`
}

func (x *UserSendMsgResp) Reset() {
	*x = UserSendMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSendMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSendMsgResp) ProtoMessage() {}

func (x *UserSendMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSendMsgResp.ProtoReflect.Descriptor instead.
func (*UserSendMsgResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{9}
}

func (x *UserSendMsgResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *UserSendMsgResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *UserSendMsgResp) GetReqIdentifier() int32 {
	if x != nil {
		return x.ReqIdentifier
	}
	return 0
}

func (x *UserSendMsgResp) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *UserSendMsgResp) GetServerMsgID() string {
	if x != nil {
		return x.ServerMsgID
	}
	return ""
}

func (x *UserSendMsgResp) GetClientMsgID() string {
	if x != nil {
		return x.ClientMsgID
	}
	return ""
}

var File_chat_chat_proto protoreflect.FileDescriptor

var file_chat_chat_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x70, 0x62, 0x43, 0x68, 0x61, 0x74, 0x22, 0x8f, 0x04, 0x0a, 0x11, 0x57, 0x53,
	0x54, 0x6f, 0x4d, 0x73, 0x67, 0x53, 0x76, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x76, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x26, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x22, 0xfa, 0x03, 0x0a, 0x16,
	0x4d, 0x73, 0x67, 0x53, 0x76, 0x72, 0x54, 0x6f, 0x50, 0x75, 0x73, 0x68, 0x53, 0x76, 0x72, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x76, 0x53, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x52, 0x65, 0x63, 0x76, 0x53, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x22, 0x7e, 0x0a, 0x0e, 0x50, 0x75, 0x6c, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x65, 0x71, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x65, 0x71, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x53, 0x65, 0x71, 0x45, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xe9, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x6c,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x71,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x71, 0x12, 0x3a,
	0x0a, 0x0d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x47,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x62, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0x48, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x65,
	0x71, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x53,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x71, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x72, 0x72,
	0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x53, 0x65, 0x71, 0x22, 0x45, 0x0a, 0x0c, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xfd, 0x02, 0x0a, 0x09, 0x4d,
	0x73, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x46,
	0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x53,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x22, 0x90, 0x04, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a,
	0x0d, 0x52, 0x65, 0x71, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6e,
	0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x45, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x45, 0x78, 0x22, 0xc9, 0x01,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x72, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x32, 0xc0, 0x01, 0x0a, 0x04, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x71, 0x12,
	0x14, 0x2e, 0x70, 0x62, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53,
	0x65, 0x71, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x71, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0b,
	0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x62,
	0x43, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x75, 0x6c,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x2e, 0x70, 0x62,
	0x43, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x42, 0x06, 0x5a, 0x04,
	0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_chat_proto_rawDescOnce sync.Once
	file_chat_chat_proto_rawDescData = file_chat_chat_proto_rawDesc
)

func file_chat_chat_proto_rawDescGZIP() []byte {
	file_chat_chat_proto_rawDescOnce.Do(func() {
		file_chat_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_chat_proto_rawDescData)
	})
	return file_chat_chat_proto_rawDescData
}

var file_chat_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_chat_chat_proto_goTypes = []interface{}{
	(*WSToMsgSvrChatMsg)(nil),      // 0: pbChat.WSToMsgSvrChatMsg
	(*MsgSvrToPushSvrChatMsg)(nil), // 1: pbChat.MsgSvrToPushSvrChatMsg
	(*PullMessageReq)(nil),         // 2: pbChat.PullMessageReq
	(*PullMessageResp)(nil),        // 3: pbChat.PullMessageResp
	(*GetNewSeqReq)(nil),           // 4: pbChat.GetNewSeqReq
	(*GetNewSeqResp)(nil),          // 5: pbChat.GetNewSeqResp
	(*GatherFormat)(nil),           // 6: pbChat.GatherFormat
	(*MsgFormat)(nil),              // 7: pbChat.MsgFormat
	(*UserSendMsgReq)(nil),         // 8: pbChat.UserSendMsgReq
	(*UserSendMsgResp)(nil),        // 9: pbChat.UserSendMsgResp
}
var file_chat_chat_proto_depIdxs = []int32{
	6, // 0: pbChat.PullMessageResp.SingleUserMsg:type_name -> pbChat.GatherFormat
	6, // 1: pbChat.PullMessageResp.GroupUserMsg:type_name -> pbChat.GatherFormat
	7, // 2: pbChat.GatherFormat.List:type_name -> pbChat.MsgFormat
	4, // 3: pbChat.Chat.GetNewSeq:input_type -> pbChat.GetNewSeqReq
	2, // 4: pbChat.Chat.PullMessage:input_type -> pbChat.PullMessageReq
	8, // 5: pbChat.Chat.UserSendMsg:input_type -> pbChat.UserSendMsgReq
	5, // 6: pbChat.Chat.GetNewSeq:output_type -> pbChat.GetNewSeqResp
	3, // 7: pbChat.Chat.PullMessage:output_type -> pbChat.PullMessageResp
	9, // 8: pbChat.Chat.UserSendMsg:output_type -> pbChat.UserSendMsgResp
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_chat_chat_proto_init() }
func file_chat_chat_proto_init() {
	if File_chat_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WSToMsgSvrChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSvrToPushSvrChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullMessageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewSeqReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewSeqResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatherFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSendMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSendMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_chat_proto_goTypes,
		DependencyIndexes: file_chat_chat_proto_depIdxs,
		MessageInfos:      file_chat_chat_proto_msgTypes,
	}.Build()
	File_chat_chat_proto = out.File
	file_chat_chat_proto_rawDesc = nil
	file_chat_chat_proto_goTypes = nil
	file_chat_chat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	GetNewSeq(ctx context.Context, in *GetNewSeqReq, opts ...grpc.CallOption) (*GetNewSeqResp, error)
	PullMessage(ctx context.Context, in *PullMessageReq, opts ...grpc.CallOption) (*PullMessageResp, error)
	UserSendMsg(ctx context.Context, in *UserSendMsgReq, opts ...grpc.CallOption) (*UserSendMsgResp, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) GetNewSeq(ctx context.Context, in *GetNewSeqReq, opts ...grpc.CallOption) (*GetNewSeqResp, error) {
	out := new(GetNewSeqResp)
	err := c.cc.Invoke(ctx, "/pbChat.Chat/GetNewSeq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) PullMessage(ctx context.Context, in *PullMessageReq, opts ...grpc.CallOption) (*PullMessageResp, error) {
	out := new(PullMessageResp)
	err := c.cc.Invoke(ctx, "/pbChat.Chat/PullMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UserSendMsg(ctx context.Context, in *UserSendMsgReq, opts ...grpc.CallOption) (*UserSendMsgResp, error) {
	out := new(UserSendMsgResp)
	err := c.cc.Invoke(ctx, "/pbChat.Chat/UserSendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	GetNewSeq(context.Context, *GetNewSeqReq) (*GetNewSeqResp, error)
	PullMessage(context.Context, *PullMessageReq) (*PullMessageResp, error)
	UserSendMsg(context.Context, *UserSendMsgReq) (*UserSendMsgResp, error)
}

// UnimplementedChatServer can be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (*UnimplementedChatServer) GetNewSeq(context.Context, *GetNewSeqReq) (*GetNewSeqResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewSeq not implemented")
}
func (*UnimplementedChatServer) PullMessage(context.Context, *PullMessageReq) (*PullMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullMessage not implemented")
}
func (*UnimplementedChatServer) UserSendMsg(context.Context, *UserSendMsgReq) (*UserSendMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSendMsg not implemented")
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_GetNewSeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewSeqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetNewSeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbChat.Chat/GetNewSeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetNewSeq(ctx, req.(*GetNewSeqReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_PullMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).PullMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbChat.Chat/PullMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).PullMessage(ctx, req.(*PullMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UserSendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UserSendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbChat.Chat/UserSendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UserSendMsg(ctx, req.(*UserSendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbChat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNewSeq",
			Handler:    _Chat_GetNewSeq_Handler,
		},
		{
			MethodName: "PullMessage",
			Handler:    _Chat_PullMessage_Handler,
		},
		{
			MethodName: "UserSendMsg",
			Handler:    _Chat_UserSendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/chat.proto",
}
